name: AWS Deployment Pipeline

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  EC2_INSTANCE_TYPE: t2.micro
  EC2_AMI_ID: ami-09040d770ffe2224f # Update with your preferred AMI ID
  EC2_KEY_NAME: adithi # Update with your key pair name
  S3_BUCKET_NAME: sucessbucket123  # Unique S3 bucket name
  SECURITY_GROUP_ID: sg-0f931dcdc05d8ecd6 # Replace with your security group ID

jobs:
  create-resources:
    name: Create AWS Resources
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.create_instance.outputs.instance_id }}
      public_ip: ${{ steps.get_ip.outputs.public_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if S3 bucket exists
        id: check_s3
        run: |
          if aws s3api head-bucket --bucket ${{ env.S3_BUCKET_NAME }} 2>/dev/null; then
            echo "S3 bucket exists"
            echo "S3_BUCKET_EXISTS=true" >> $GITHUB_ENV
          else
            echo "S3 bucket does not exist"
            echo "S3_BUCKET_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create S3 bucket if not exists
        if: env.S3_BUCKET_EXISTS == 'false'
        run: |
          aws s3 mb s3://${{ env.S3_BUCKET_NAME }} --region ${{ env.AWS_REGION }}

      - name: Check for existing EC2 instance
        id: check_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=myvm" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "Instance does not exist."
            echo "INSTANCE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Instance exists."
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
            echo "INSTANCE_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Create EC2 instance if not exists
        if: env.INSTANCE_EXISTS == 'false'
        id: create_instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances --image-id ${{ env.EC2_AMI_ID }} --count 1 --instance-type ${{ env.EC2_INSTANCE_TYPE }} --key-name ${{ env.EC2_KEY_NAME }} --security-group-ids ${{ env.SECURITY_GROUP_ID }} --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=myvm}]' --query 'Instances[0].InstanceId' --output text)
          echo "Created instance ID: $INSTANCE_ID"
          echo "::set-output name=instance_id::${INSTANCE_ID}"

      - name: Wait for EC2 instance to be in running state
        run: |
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 instance public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --instance-id ${{ env.INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "Public IP: $PUBLIC_IP"
          echo "::set-output name=public_ip::${PUBLIC_IP}"
        env:
          INSTANCE_ID: ${{ steps.create_instance.outputs.instance_id }}

  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.myvm_sshkey }}" > ~/.ssh/myvm
          chmod 400 ~/.ssh/myvm

      - name: Deploy Python App
        run: |
          echo "Public IP is ${{ needs.create-resources.outputs.public_ip }}"
          scp -o StrictHostKeyChecking=no -i ~/.ssh/myvm hello_world.py ec2-user@${{ needs.create-resources.outputs.public_ip }}:/home/ec2-user/
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/myvm ec2-user@${{ needs.create-resources.outputs.public_ip }} 'python3 /home/ec2-user/hello_world.py'

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: deploy-app
    steps:
      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/myvm ec2-user@${{ needs.create-resources.outputs.public_ip }} 'curl localhost:8000'
